services:
  netbox:
    image: docker.io/netboxcommunity/netbox:latest
    container_name: netbox
    restart: unless-stopped
    env_file:
      - stack.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    ports:
      - "8001:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/login/ >/dev/null || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 50
      start_period: 500s
    volumes:
      - netbox_media:/opt/netbox/netbox/media
      - netbox_reports:/opt/netbox/netbox/reports
      - netbox_scripts:/opt/netbox/netbox/scripts

  netbox-worker:
    image: docker.io/netboxcommunity/netbox:latest
    container_name: netbox-worker
    restart: unless-stopped
    env_file:
      - stack.env
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker

  netbox-housekeeping:
    image: docker.io/netboxcommunity/netbox:latest
    container_name: netbox-housekeeping
    restart: unless-stopped
    env_file:
      - stack.env
    depends_on:
      netbox:
        condition: service_healthy
    command:
      - /opt/netbox/housekeeping.sh
      
  postgres:
    image: postgres:16-alpine
    container_name: netbox-postgres
    restart: unless-stopped
    env_file:
      - stack.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -t 2 -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 50
      start_period: 500s
    volumes:
      - netbox_db:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: netbox-redis
    restart: unless-stopped
    env_file:
      - stack.env
    command: >
      sh -c "redis-server --appendonly yes --requirepass $$REDIS_PASSWORD"
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli -a \"$$REDIS_PASSWORD\" ping) = 'PONG' ]"]
      interval: 2s
      timeout: 60s
      retries: 10
      start_period: 30s
    volumes:
      - netbox_redis:/data

  redis-cache:
    image: redis:latest
    container_name: netbox-redis-cache
    restart: unless-stopped
    env_file:
      - stack.env
    command: >
      sh -c "redis-server --appendonly yes --requirepass $$REDIS_CACHE_PASSWORD"
    healthcheck:
      test: ["CMD-SHELL", "[ $$(redis-cli -a \"$$REDIS_CACHE_PASSWORD\" ping) = 'PONG' ]"]
      interval: 2s
      timeout: 60s
      retries: 10
      start_period: 30s
    volumes:
      - netbox_redis_cache:/data

volumes:
  netbox_db:
  netbox_redis:
  netbox_redis_cache:
  netbox_media:
  netbox_reports:
  netbox_scripts:
